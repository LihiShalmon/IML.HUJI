from __future__ import annotations
import numpy as np
import pandas as pd
from sklearn import datasets
from IMLearn.metrics import mean_square_error
from IMLearn.utils import split_train_test
from IMLearn.model_selection import cross_validate
from IMLearn.learners.regressors import PolynomialFitting, LinearRegression, RidgeRegression
from sklearn.linear_model import Lasso

from utils import *
import plotly.graph_objects as go
from plotly.subplots import make_subplots


def select_polynomial_degree(n_samples: int = 100, noise: float = 5):
    """
    Simulate data from a polynomial model and use cross-validation to select the best fitting degree

    Parameters
    ----------
    n_samples: int, default=100
        Number of samples to generate

    noise: float, default = 5
        Noise level to simulate in responses
    """
    # Question 1 - Generate dataset for model f(x)=(x+3)(x+2)(x+1)(x-1)(x-2) + eps for eps Gaussian noise
    # and split into training- and testing portions

    # Generate dataset for model
    X = np.random.uniform(-1.2, 2, n_samples)
    foo = lambda x: (x + 3) * (x + 2) * (x + 1) * (x - 1) * (x - 2)
    y = foo(X)

    # split to train and testing
    X_train, y_train, X_test, y_test = split_train_test(pd.DataFrame(X), pd.Series(y), 0.66666)
    # conversion of pd objects to np
    y_train = y_train.to_numpy()
    y_test = y_test.to_numpy()
    X_train = X_train.to_numpy().reshape(-1)
    X_test = X_test.to_numpy().reshape(-1)

    fig = go.Figure([go.Scatter(x=X_train, y=y_train, showlegend=False, mode='markers', name="train"),
                     go.Scatter(x=X_test, y=y_test, showlegend=False, mode='markers', name="test")])
    # fig.update_layout(title="Train and Test data generated by the model.")
    fig.show()

    # Question 2 - Perform CV for polynomial fitting with degrees 0,1,...,10
    y_train_noise = y_train + np.random.normal(0, noise , y_train.shape)
    y_test_noise = y_test + np.random.normal(0, noise , y_test.shape)

    folds = 5
    max_degree = 10+1
    validation_score = np.zeros(max_degree)
    train_score = np.zeros(max_degree)

    for degree in range(max_degree):
        train_score[degree], validation_score[degree] = cross_validate(PolynomialFitting(degree),
                                                                       X_train, y_train_noise,
                                                                       scoring=mean_square_error, cv=folds)

    range_degree = np.arange(max_degree)
    fig2 = go.Figure([go.Scatter(x=range_degree, y=validation_score, showlegend=False, mode='markers+lines'),
                      go.Scatter(x=range_degree, y=train_score, showlegend=False, mode='markers+lines')])
    # fig2.update_layout(title="Scores by degree")
    fig2.show()

    # Question 3 - Using best value of k, fit a k-degree polynomial model and report test error
    lowest = np.argmin(np.array(validation_score))
    print(lowest)
    print()


def select_regularization_parameter(n_samples: int = 50, n_evaluations: int = 500):
    """
    Using sklearn's diabetes dataset use cross-validation to select the best fitting regularization parameter
    values for Ridge and Lasso regressions

    Parameters
    ----------
    n_samples: int, default=50
        Number of samples to generate

    n_evaluations: int, default = 500
        Number of regularization parameter values to evaluate for each of the algorithms
    """
    # Question 6 - Load diabetes dataset and split into training and testing portions
    X, y = datasets.load_diabetes(return_X_y=True)
    train_x, train_y, test_x, train_y = X[:n_samples, ], y[:n_samples, ], X[n_samples:, ], y[n_samples:, ]

    # Question 7 - Perform CV for different values of the regularization parameter for Ridge and Lasso regressions
    folds = 5
    spaces = np.linspace(0, 0.5, n_evaluations)
    validation_score = np.zeros(len(spaces))
    train_score = np.zeros(len(spaces))

    for lam in range(len(spaces)):
        train_score[lam], validation_score[lam] = cross_validate(RidgeRegression(lam),
                                                                       train_x, train_y,
                                                                       scoring=mean_square_error, cv=folds)

    fig3 = go.Figure([go.Scatter(x=spaces, y=validation_score, showlegend=False, mode='lines' ,name="validation_score"),
                      go.Scatter(x=spaces, y=train_score, showlegend=False, mode='lines', name="train_score")])
    # fig2.update_layout(title="Scores by degree")
    fig3.show()

    # Question 8 - Compare best Ridge model, best Lasso model and Least Squares model


if __name__ == '__main__':
    np.random.seed(0)
    # select_polynomial_degree()
    # select_polynomial_degree(noise=0)
    # select_polynomial_degree(1500, noise=10)
    select_regularization_parameter()